// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Nox.Reference.Data.World;

#nullable disable

namespace Nox.Reference.Data.World.Migrations
{
    [DbContext(typeof(WorldDbContext))]
    [Migration("20230601112729_InitDatabase")]
    partial class InitDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("ContinentCountry", b =>
                {
                    b.Property<int>("ContinentsEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CountryEntityId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ContinentsEntityId", "CountryEntityId");

                    b.HasIndex("CountryEntityId");

                    b.ToTable("ContinentCountry");
                });

            modelBuilder.Entity("CountryCountry", b =>
                {
                    b.Property<int>("BorderingCountriesEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CountryEntityId")
                        .HasColumnType("INTEGER");

                    b.HasKey("BorderingCountriesEntityId", "CountryEntityId");

                    b.HasIndex("CountryEntityId");

                    b.ToTable("CountryCountry");
                });

            modelBuilder.Entity("CountryCurrency", b =>
                {
                    b.Property<int>("CountryEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrenciesEntityId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CountryEntityId", "CurrenciesEntityId");

                    b.HasIndex("CurrenciesEntityId");

                    b.ToTable("CountryCurrency");
                });

            modelBuilder.Entity("CountryDemonymn", b =>
                {
                    b.Property<int>("CountryEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DemonymsEntityId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CountryEntityId", "DemonymsEntityId");

                    b.HasIndex("DemonymsEntityId");

                    b.ToTable("CountryDemonymn");
                });

            modelBuilder.Entity("CountryLanguage", b =>
                {
                    b.Property<int>("CountriesEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LanguagesEntityId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CountriesEntityId", "LanguagesEntityId");

                    b.HasIndex("LanguagesEntityId");

                    b.ToTable("CountryLanguage");
                });

            modelBuilder.Entity("CountryTimeZone", b =>
                {
                    b.Property<int>("CountriesEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TimeZonesEntityId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CountriesEntityId", "TimeZonesEntityId");

                    b.HasIndex("TimeZonesEntityId");

                    b.ToTable("CountryTimeZone");
                });

            modelBuilder.Entity("CountryTopLevelDomain", b =>
                {
                    b.Property<int>("CountryEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TopLevelDomainsEntityId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CountryEntityId", "TopLevelDomainsEntityId");

                    b.HasIndex("TopLevelDomainsEntityId");

                    b.ToTable("CountryTopLevelDomain");
                });

            modelBuilder.Entity("Nox.Reference.AlternateSpelling", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CountryEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EntityId");

                    b.HasIndex("CountryEntityId");

                    b.ToTable("AlternateSpelling");
                });

            modelBuilder.Entity("Nox.Reference.CarrierPhoneNumber", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PhoneCarrierEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityId");

                    b.HasIndex("PhoneCarrierEntityId");

                    b.ToTable("CarrierPhoneNumber");
                });

            modelBuilder.Entity("Nox.Reference.CoatOfArms", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Png")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Svg")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EntityId");

                    b.ToTable("CoatOfArms");
                });

            modelBuilder.Entity("Nox.Reference.Continent", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EntityId");

                    b.ToTable("Continent");
                });

            modelBuilder.Entity("Nox.Reference.Country", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AlphaCode2")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AlphaCode3")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("CoatOfArmsEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CodeAssignedStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("DialingEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EmojiFlag")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FifaCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FipsCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("FlagEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GeoCoordinatesEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsIndependent")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLandlocked")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsUnitedNationsMember")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("LandAreaInSquareKilometers")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MapsEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NamesEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NumericCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OlympicCommitteeCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Population")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PostalCodeEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("StartDayOfWeek")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StartOfWeek")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SubRegion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("VatNumberDefinitionId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("VehicleEntityId")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityId");

                    b.HasIndex("CoatOfArmsEntityId");

                    b.HasIndex("DialingEntityId");

                    b.HasIndex("FlagEntityId");

                    b.HasIndex("GeoCoordinatesEntityId");

                    b.HasIndex("MapsEntityId");

                    b.HasIndex("NamesEntityId");

                    b.HasIndex("PostalCodeEntityId");

                    b.HasIndex("VatNumberDefinitionId")
                        .IsUnique();

                    b.HasIndex("VehicleEntityId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Nox.Reference.CountryCapital", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CountryEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GeoCoordinatesEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EntityId");

                    b.HasIndex("CountryEntityId");

                    b.HasIndex("GeoCoordinatesEntityId");

                    b.ToTable("CountryCapital");
                });

            modelBuilder.Entity("Nox.Reference.CountryDialing", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Suffixes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EntityId");

                    b.ToTable("CountryDialing");
                });

            modelBuilder.Entity("Nox.Reference.CountryFlag", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AlternateText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Png")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Svg")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EntityId");

                    b.ToTable("CountryFlag");
                });

            modelBuilder.Entity("Nox.Reference.CountryHoliday", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CountryEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CountryName")
                        .HasColumnType("TEXT");

                    b.Property<string>("DayOff")
                        .HasColumnType("TEXT");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityId");

                    b.HasIndex("CountryEntityId");

                    b.ToTable("CountryHoliday");
                });

            modelBuilder.Entity("Nox.Reference.CountryMaps", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("GoogleMaps")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OpenStreetMaps")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EntityId");

                    b.ToTable("CountryMaps");
                });

            modelBuilder.Entity("Nox.Reference.CountryNameTranslation", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CommonName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CountryEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LanguageEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OfficialName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EntityId");

                    b.HasIndex("CountryEntityId");

                    b.HasIndex("LanguageEntityId");

                    b.ToTable("CountryNameTranslation");
                });

            modelBuilder.Entity("Nox.Reference.CountryNames", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CommonName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OfficialName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EntityId");

                    b.ToTable("CountryNames");
                });

            modelBuilder.Entity("Nox.Reference.CountryNativeName", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CommonName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("CountryNamesEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LanguageEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OfficialName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EntityId");

                    b.HasIndex("CountryNamesEntityId");

                    b.HasIndex("LanguageEntityId");

                    b.ToTable("CountryNativeName");
                });

            modelBuilder.Entity("Nox.Reference.CountryVehicle", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DrivingSide")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("InternationalRegistrationCodes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EntityId");

                    b.ToTable("CountryVehicle");
                });

            modelBuilder.Entity("Nox.Reference.Culture", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CharacterOrientation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CommonName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CountryEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayNameWithDialect")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FormalName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LanguageIso_639_2t")
                        .HasColumnType("TEXT");

                    b.Property<string>("LineOrientation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NativeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EntityId");

                    b.HasIndex("CountryEntityId");

                    b.ToTable("Culture");
                });

            modelBuilder.Entity("Nox.Reference.Currency", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BanknotesEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CoinsEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DecimalDigits")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DecimalSeparator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IsoCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IsoNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MajorUnitEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinorUnitEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("SpaceBetweenAmountAndSymbol")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("SymbolOnLeft")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ThousandsSeparator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EntityId");

                    b.HasIndex("BanknotesEntityId");

                    b.HasIndex("CoinsEntityId");

                    b.HasIndex("MajorUnitEntityId");

                    b.HasIndex("MinorUnitEntityId");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("Nox.Reference.CurrencyFrequentUsage", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CurrencyUsageEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EntityId");

                    b.HasIndex("CurrencyUsageEntityId");

                    b.ToTable("CurrencyFrequentUsage");
                });

            modelBuilder.Entity("Nox.Reference.CurrencyRareUsage", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CurrencyUsageEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EntityId");

                    b.HasIndex("CurrencyUsageEntityId");

                    b.ToTable("CurrencyRareUsage");
                });

            modelBuilder.Entity("Nox.Reference.CurrencyUsage", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityId");

                    b.ToTable("CurrencyUsage");
                });

            modelBuilder.Entity("Nox.Reference.DateFormat", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AmPmStrings")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CultureId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Date_0")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Date_1")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Date_2")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Date_3")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EraNames")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Eras")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Months")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ShortMonths")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ShortWeekdays")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Weekdays")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EntityId");

                    b.HasIndex("CultureId")
                        .IsUnique();

                    b.ToTable("DateFormat");
                });

            modelBuilder.Entity("Nox.Reference.Demonymn", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Feminine")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("LanguageEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Masculine")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EntityId");

                    b.HasIndex("LanguageEntityId");

                    b.ToTable("Demonymn");
                });

            modelBuilder.Entity("Nox.Reference.GeoCoordinates", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityId");

                    b.ToTable("GeoCoordinates");
                });

            modelBuilder.Entity("Nox.Reference.GiniCoefficient", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CountryEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Value")
                        .HasColumnType("TEXT");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityId");

                    b.HasIndex("CountryEntityId");

                    b.ToTable("GiniCoefficient");
                });

            modelBuilder.Entity("Nox.Reference.HolidayData", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CountryHolidayEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RegionHolidayEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StateHolidayEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityId");

                    b.HasIndex("CountryHolidayEntityId");

                    b.HasIndex("RegionHolidayEntityId");

                    b.HasIndex("StateHolidayEntityId");

                    b.ToTable("HolidayData");
                });

            modelBuilder.Entity("Nox.Reference.Language", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Common")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Iso_639_1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Iso_639_2b")
                        .HasColumnType("TEXT");

                    b.Property<string>("Iso_639_2t")
                        .HasColumnType("TEXT");

                    b.Property<string>("Iso_639_3")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Scope")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WikiUrl")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityId");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("Nox.Reference.LanguageTranslation", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("LanguageEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Translation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EntityId");

                    b.HasIndex("LanguageEntityId");

                    b.ToTable("LanguageTranslation");
                });

            modelBuilder.Entity("Nox.Reference.LocalHolidayName", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HolidayDataEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Language")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityId");

                    b.HasIndex("HolidayDataEntityId");

                    b.ToTable("LocalHolidayName");
                });

            modelBuilder.Entity("Nox.Reference.MajorCurrencyUnit", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EntityId");

                    b.ToTable("MajorCurrencyUnit");
                });

            modelBuilder.Entity("Nox.Reference.MinorCurrencyUnit", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("MajorValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EntityId");

                    b.ToTable("MinorCurrencyUnit");
                });

            modelBuilder.Entity("Nox.Reference.NumberFormat", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CultureId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CurrencySymbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DecimalSeparator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Digit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ExponentSeparator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GroupingSeparator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Infinity")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("InternationalCurrencySymbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MinusSign")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MonetaryDecimalSeparator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NotANumberSymbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PadEscape")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PatternSeparator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PerMill")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Percent")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PlusSign")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SignificantDigit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ZeroDigit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EntityId");

                    b.HasIndex("CultureId")
                        .IsUnique();

                    b.ToTable("NumberFormat");
                });

            modelBuilder.Entity("Nox.Reference.PhoneCarrier", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EntityId");

                    b.ToTable("PhoneCarrier");
                });

            modelBuilder.Entity("Nox.Reference.PostalCode", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Format")
                        .HasColumnType("TEXT");

                    b.Property<string>("Regex")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityId");

                    b.ToTable("PostalCode");
                });

            modelBuilder.Entity("Nox.Reference.RegionHoliday", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("StateHolidayEntityId")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityId");

                    b.HasIndex("StateHolidayEntityId");

                    b.ToTable("RegionHoliday");
                });

            modelBuilder.Entity("Nox.Reference.StateHoliday", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CountryHolidayEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EntityId");

                    b.HasIndex("CountryHolidayEntityId");

                    b.ToTable("StateHoliday");
                });

            modelBuilder.Entity("Nox.Reference.TimeZone", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DST_TimeZoneAbbreviation")
                        .HasColumnType("TEXT");

                    b.Property<string>("DST_UTC_Offset")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EmbeddedComments")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double?>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("SDT_TimeZoneAbbreviation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SDT_UTC_Offset")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EntityId");

                    b.ToTable("TimeZone");
                });

            modelBuilder.Entity("Nox.Reference.TopLevelDomain", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EntityId");

                    b.ToTable("TopLevelDomain");
                });

            modelBuilder.Entity("Nox.Reference.VatNumberDefinition", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LocalName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("VerificationApi")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityId");

                    b.ToTable("VatNumberDefinition");
                });

            modelBuilder.Entity("Nox.Reference.VatNumberValidationRule", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("InputMask")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MaximumLength")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinimumLength")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Regex")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TranslationId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ValidationFormatDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("VatNumberDefinitionEntityId")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityId");

                    b.HasIndex("VatNumberDefinitionEntityId");

                    b.ToTable("VatNumberValidationRule");
                });

            modelBuilder.Entity("ContinentCountry", b =>
                {
                    b.HasOne("Nox.Reference.Continent", null)
                        .WithMany()
                        .HasForeignKey("ContinentsEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nox.Reference.Country", null)
                        .WithMany()
                        .HasForeignKey("CountryEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CountryCountry", b =>
                {
                    b.HasOne("Nox.Reference.Country", null)
                        .WithMany()
                        .HasForeignKey("BorderingCountriesEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nox.Reference.Country", null)
                        .WithMany()
                        .HasForeignKey("CountryEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CountryCurrency", b =>
                {
                    b.HasOne("Nox.Reference.Country", null)
                        .WithMany()
                        .HasForeignKey("CountryEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nox.Reference.Currency", null)
                        .WithMany()
                        .HasForeignKey("CurrenciesEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CountryDemonymn", b =>
                {
                    b.HasOne("Nox.Reference.Country", null)
                        .WithMany()
                        .HasForeignKey("CountryEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nox.Reference.Demonymn", null)
                        .WithMany()
                        .HasForeignKey("DemonymsEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CountryLanguage", b =>
                {
                    b.HasOne("Nox.Reference.Country", null)
                        .WithMany()
                        .HasForeignKey("CountriesEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nox.Reference.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguagesEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CountryTimeZone", b =>
                {
                    b.HasOne("Nox.Reference.Country", null)
                        .WithMany()
                        .HasForeignKey("CountriesEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nox.Reference.TimeZone", null)
                        .WithMany()
                        .HasForeignKey("TimeZonesEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CountryTopLevelDomain", b =>
                {
                    b.HasOne("Nox.Reference.Country", null)
                        .WithMany()
                        .HasForeignKey("CountryEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nox.Reference.TopLevelDomain", null)
                        .WithMany()
                        .HasForeignKey("TopLevelDomainsEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nox.Reference.AlternateSpelling", b =>
                {
                    b.HasOne("Nox.Reference.Country", null)
                        .WithMany("AlternateSpellings")
                        .HasForeignKey("CountryEntityId");
                });

            modelBuilder.Entity("Nox.Reference.CarrierPhoneNumber", b =>
                {
                    b.HasOne("Nox.Reference.PhoneCarrier", "PhoneCarrier")
                        .WithMany("PhoneNumberCarriers")
                        .HasForeignKey("PhoneCarrierEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PhoneCarrier");
                });

            modelBuilder.Entity("Nox.Reference.Country", b =>
                {
                    b.HasOne("Nox.Reference.CoatOfArms", "CoatOfArms")
                        .WithMany()
                        .HasForeignKey("CoatOfArmsEntityId");

                    b.HasOne("Nox.Reference.CountryDialing", "Dialing")
                        .WithMany()
                        .HasForeignKey("DialingEntityId");

                    b.HasOne("Nox.Reference.CountryFlag", "Flag")
                        .WithMany()
                        .HasForeignKey("FlagEntityId");

                    b.HasOne("Nox.Reference.GeoCoordinates", "GeoCoordinates")
                        .WithMany()
                        .HasForeignKey("GeoCoordinatesEntityId");

                    b.HasOne("Nox.Reference.CountryMaps", "Maps")
                        .WithMany()
                        .HasForeignKey("MapsEntityId");

                    b.HasOne("Nox.Reference.CountryNames", "Names")
                        .WithMany()
                        .HasForeignKey("NamesEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nox.Reference.PostalCode", "PostalCode")
                        .WithMany()
                        .HasForeignKey("PostalCodeEntityId");

                    b.HasOne("Nox.Reference.VatNumberDefinition", "VatNumberDefinition")
                        .WithOne("Country")
                        .HasForeignKey("Nox.Reference.Country", "VatNumberDefinitionId");

                    b.HasOne("Nox.Reference.CountryVehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleEntityId");

                    b.Navigation("CoatOfArms");

                    b.Navigation("Dialing");

                    b.Navigation("Flag");

                    b.Navigation("GeoCoordinates");

                    b.Navigation("Maps");

                    b.Navigation("Names");

                    b.Navigation("PostalCode");

                    b.Navigation("VatNumberDefinition");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Nox.Reference.CountryCapital", b =>
                {
                    b.HasOne("Nox.Reference.Country", null)
                        .WithMany("Capitals")
                        .HasForeignKey("CountryEntityId");

                    b.HasOne("Nox.Reference.GeoCoordinates", "GeoCoordinates")
                        .WithMany()
                        .HasForeignKey("GeoCoordinatesEntityId");

                    b.Navigation("GeoCoordinates");
                });

            modelBuilder.Entity("Nox.Reference.CountryHoliday", b =>
                {
                    b.HasOne("Nox.Reference.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Nox.Reference.CountryNameTranslation", b =>
                {
                    b.HasOne("Nox.Reference.Country", "Country")
                        .WithMany("NameTranslations")
                        .HasForeignKey("CountryEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nox.Reference.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Nox.Reference.CountryNativeName", b =>
                {
                    b.HasOne("Nox.Reference.CountryNames", null)
                        .WithMany("NativeNames")
                        .HasForeignKey("CountryNamesEntityId");

                    b.HasOne("Nox.Reference.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Nox.Reference.Culture", b =>
                {
                    b.HasOne("Nox.Reference.Country", "Country")
                        .WithMany("Cultures")
                        .HasForeignKey("CountryEntityId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Nox.Reference.Currency", b =>
                {
                    b.HasOne("Nox.Reference.CurrencyUsage", "Banknotes")
                        .WithMany()
                        .HasForeignKey("BanknotesEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nox.Reference.CurrencyUsage", "Coins")
                        .WithMany()
                        .HasForeignKey("CoinsEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nox.Reference.MajorCurrencyUnit", "MajorUnit")
                        .WithMany()
                        .HasForeignKey("MajorUnitEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nox.Reference.MinorCurrencyUnit", "MinorUnit")
                        .WithMany()
                        .HasForeignKey("MinorUnitEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banknotes");

                    b.Navigation("Coins");

                    b.Navigation("MajorUnit");

                    b.Navigation("MinorUnit");
                });

            modelBuilder.Entity("Nox.Reference.CurrencyFrequentUsage", b =>
                {
                    b.HasOne("Nox.Reference.CurrencyUsage", null)
                        .WithMany("Frequent")
                        .HasForeignKey("CurrencyUsageEntityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nox.Reference.CurrencyRareUsage", b =>
                {
                    b.HasOne("Nox.Reference.CurrencyUsage", null)
                        .WithMany("Rare")
                        .HasForeignKey("CurrencyUsageEntityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nox.Reference.DateFormat", b =>
                {
                    b.HasOne("Nox.Reference.Culture", "Culture")
                        .WithOne("DateFormat")
                        .HasForeignKey("Nox.Reference.DateFormat", "CultureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Culture");
                });

            modelBuilder.Entity("Nox.Reference.Demonymn", b =>
                {
                    b.HasOne("Nox.Reference.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Nox.Reference.GiniCoefficient", b =>
                {
                    b.HasOne("Nox.Reference.Country", null)
                        .WithMany("GiniCoefficients")
                        .HasForeignKey("CountryEntityId");
                });

            modelBuilder.Entity("Nox.Reference.HolidayData", b =>
                {
                    b.HasOne("Nox.Reference.CountryHoliday", null)
                        .WithMany("Holidays")
                        .HasForeignKey("CountryHolidayEntityId");

                    b.HasOne("Nox.Reference.RegionHoliday", null)
                        .WithMany("Holidays")
                        .HasForeignKey("RegionHolidayEntityId");

                    b.HasOne("Nox.Reference.StateHoliday", null)
                        .WithMany("Holidays")
                        .HasForeignKey("StateHolidayEntityId");
                });

            modelBuilder.Entity("Nox.Reference.LanguageTranslation", b =>
                {
                    b.HasOne("Nox.Reference.Language", null)
                        .WithMany("NameTranslations")
                        .HasForeignKey("LanguageEntityId");
                });

            modelBuilder.Entity("Nox.Reference.LocalHolidayName", b =>
                {
                    b.HasOne("Nox.Reference.HolidayData", null)
                        .WithMany("LocalNames")
                        .HasForeignKey("HolidayDataEntityId");
                });

            modelBuilder.Entity("Nox.Reference.NumberFormat", b =>
                {
                    b.HasOne("Nox.Reference.Culture", "Culture")
                        .WithOne("NumberFormat")
                        .HasForeignKey("Nox.Reference.NumberFormat", "CultureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Culture");
                });

            modelBuilder.Entity("Nox.Reference.RegionHoliday", b =>
                {
                    b.HasOne("Nox.Reference.StateHoliday", null)
                        .WithMany("Regions")
                        .HasForeignKey("StateHolidayEntityId");
                });

            modelBuilder.Entity("Nox.Reference.StateHoliday", b =>
                {
                    b.HasOne("Nox.Reference.CountryHoliday", null)
                        .WithMany("States")
                        .HasForeignKey("CountryHolidayEntityId");
                });

            modelBuilder.Entity("Nox.Reference.VatNumberValidationRule", b =>
                {
                    b.HasOne("Nox.Reference.VatNumberDefinition", null)
                        .WithMany("ValidationRules")
                        .HasForeignKey("VatNumberDefinitionEntityId");

                    b.OwnsOne("Nox.Reference.Checksum", "Checksum", b1 =>
                        {
                            b1.Property<int>("VatNumberValidationRuleEntityId")
                                .HasColumnType("INTEGER");

                            b1.Property<int?>("Algorithm")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("ChecksumDigit")
                                .HasColumnType("TEXT");

                            b1.Property<int?>("Modulus")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Weights")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("VatNumberValidationRuleEntityId");

                            b1.ToTable("VatNumberValidationRule");

                            b1.WithOwner()
                                .HasForeignKey("VatNumberValidationRuleEntityId");
                        });

                    b.Navigation("Checksum");
                });

            modelBuilder.Entity("Nox.Reference.Country", b =>
                {
                    b.Navigation("AlternateSpellings");

                    b.Navigation("Capitals");

                    b.Navigation("Cultures");

                    b.Navigation("GiniCoefficients");

                    b.Navigation("NameTranslations");
                });

            modelBuilder.Entity("Nox.Reference.CountryHoliday", b =>
                {
                    b.Navigation("Holidays");

                    b.Navigation("States");
                });

            modelBuilder.Entity("Nox.Reference.CountryNames", b =>
                {
                    b.Navigation("NativeNames");
                });

            modelBuilder.Entity("Nox.Reference.Culture", b =>
                {
                    b.Navigation("DateFormat")
                        .IsRequired();

                    b.Navigation("NumberFormat")
                        .IsRequired();
                });

            modelBuilder.Entity("Nox.Reference.CurrencyUsage", b =>
                {
                    b.Navigation("Frequent");

                    b.Navigation("Rare");
                });

            modelBuilder.Entity("Nox.Reference.HolidayData", b =>
                {
                    b.Navigation("LocalNames");
                });

            modelBuilder.Entity("Nox.Reference.Language", b =>
                {
                    b.Navigation("NameTranslations");
                });

            modelBuilder.Entity("Nox.Reference.PhoneCarrier", b =>
                {
                    b.Navigation("PhoneNumberCarriers");
                });

            modelBuilder.Entity("Nox.Reference.RegionHoliday", b =>
                {
                    b.Navigation("Holidays");
                });

            modelBuilder.Entity("Nox.Reference.StateHoliday", b =>
                {
                    b.Navigation("Holidays");

                    b.Navigation("Regions");
                });

            modelBuilder.Entity("Nox.Reference.VatNumberDefinition", b =>
                {
                    b.Navigation("Country")
                        .IsRequired();

                    b.Navigation("ValidationRules");
                });
#pragma warning restore 612, 618
        }
    }
}
